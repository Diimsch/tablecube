// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum UserRole {
  WAITER
  ADMIN
}

enum BookingStatus {
  RESERVED
  CHECKED_IN
  READY_TO_ORDER
  NEEDS_SERVICE
  DONE
}

model Restaurant {
  id                String                 @id @default(uuid())
  name              String
  tables            Table[]
  bookings          Booking[]
  menuItems         MenuItem[]
  usersWithRoles    UserRoleInRestaurant[]
  tablePositionGrid TablePosition[]
  gridSize          Int
}

model User {
  id                 String                 @id @default(uuid())
  email              String                 @unique
  password           String
  firstName          String
  lastName           String
  bookings           UsersAtBooking[]
  rolesInRestaurants UserRoleInRestaurant[]
}

model UserRoleInRestaurant {
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  role         UserRole

  @@unique([userId, restaurantId])
}

model Table {
  id              String          @id @default(uuid())
  name            String
  bookings        Booking[]
  restaurant      Restaurant      @relation(fields: [restaurantId], references: [id])
  restaurantId    String
  tablesPositions TablePosition[]
}

model TablePosition {
  x            Int
  y            Int
  table        Table      @relation(fields: [tableId], references: [id])
  tableId      String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String

  @@id([x, y, restaurantId])
}

model Booking {
  id           String        @id @default(uuid())
  table        Table         @relation(fields: [tableId], references: [id])
  tableId      String
  start        DateTime
  end          DateTime
  status       BookingStatus
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId String

  items              ItemsOnBooking[]
  users              UsersAtBooking[]
  joinValidationData Json
  @@unique([tableId, start, end])
}

enum BookingRole {
  HOST
  GUEST
}

model UsersAtBooking {
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  booking   Booking     @relation(fields: [bookingId], references: [id])
  bookingId String
  role      BookingRole

  @@id([userId, bookingId])
}

model ItemsOnBooking {
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId String
  item      MenuItem @relation(fields: [itemId], references: [id])
  itemId    String

  @@id([bookingId, itemId])
}

enum MenuItemType {
  FOOD
  DRINK
}

model MenuItem {
  id           String           @id @default(uuid())
  name         String
  description  String
  price        Decimal
  type         MenuItemType
  available    Boolean
  bookings     ItemsOnBooking[]
  restaurant   Restaurant       @relation(fields: [restaurantId], references: [id])
  restaurantId String
}
