scalar Date

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  bookings: [Booking]!
}

type Restaurant {
  id: ID!
  name: String!
  description: String!
  address: String!
  zipCode: String!
  city: String!
  tables: [Table]
  bookings: [Booking]!
  menuItems: [MenuItem]!
}

type LoginResponse {
  token: String!
}

enum MenuItemType {
  FOOD
  DRINK
}

input CreateMenuItemInput {
  name: String!
  description: String!
  price: Float!
  type: MenuItemType!
}

input CreateBookingInput {
  tableId: ID!
  start: Date
  end: Date
  restaurantId: ID!
}

enum ValidationColors {
  RED
  GREEN
  BLUE
  YELLOW
}

type ValidationEvent {
  tableId: String!
  code: [ValidationColors!]!
}

input JoinBookingInput {
  tableId: ID!
  restaurantId: ID!
  colorCode: [ValidationColors!]!
}

type Table {
  id: ID!
  name: String!
  bookings: [Booking]!
}

enum BookingStatus {
  RESERVED
  CHECKED_IN
  READY_TO_ORDER
  NEEDS_SERVICE
  DONE
}

type MenuItem {
  id: ID!
  name: String!
  description: String!
  price: Float!
  type: MenuItemType!
  available: Boolean!
}

type Booking {
  id: ID!
  table: Table!
  start: Date!
  end: Date!
  status: BookingStatus!
  items: [BookingItem]!
}

input AddItemToBookingInput {
  itemId: ID!
  bookingId: ID!
  comment: String
}

input ChangeBookingStatusInput {
  tableId: ID!
  status: BookingStatus!
}

type BookingItem {
  id: ID!
  item: MenuItem!
  comment: String
  paid: Boolean!
}

enum UserRoles {
  WAITER
  ADMIN
  NONE
}

type UserRoleInRestaurant {
  restaurantId: ID!
  userId: ID!
  role: UserRoles!
}

input EditRestaurantInfoInput {
  restaurantId: ID!
  name: String
  description: String
  address: String
  zipCode: String
  city: String
}

type Query {
  """
  Returns a JWT token for authentication
  """
  login(email: String!, password: String!): LoginResponse!
  """
  Returns the currently active user object
  """
  me: User
  """
  Get the booking by its id
  """
  booking(bookingId: ID!): Booking
  """
  Get table by its id
  """
  table(tableId: ID!): Table
  """
  Get the restaurants menu
  """
  menu(restaurantId: ID!): [MenuItem]!
  """
  Request authentication color code to be shown on the Raspberry PI
  """
  promptValidation(tableId: String!): Boolean
  """
  Returns list of restaurants
  """
  restaurant: [Restaurant]!
  """
  Get role in Restaurant
  """
  roleInRestaurant(restaurantId: ID!): UserRoleInRestaurant!
}

type Mutation {
  """
  Create a new user
  """
  createUser(
    email: String!
    firstName: String!
    lastName: String!
    password: String!
  ): User

  """
  Allows the owner of the booking to activate the booking and check it in onto the table
  """
  checkIn(tableId: ID!, code: [ValidationColors!]!): Booking
  """
  Add a new item to the restaurants menu
  """
  addMenuItem(restaurantId: ID!, menuItem: CreateMenuItemInput!): MenuItem
  updateMenuItem(menuItemId: ID!, menuItem: CreateMenuItemInput!): MenuItem
  delMenuItem(menuItemId: ID!): MenuItem
  """
  Create a new booking for the table
  """
  createBooking(booking: CreateBookingInput!): Booking
  """
  Join currently active booking on table with id
  """
  joinBooking(data: JoinBookingInput!): Booking
  """
  Adds items to booking which is required to be of status CHECKED_IN
  """
  addItemToBooking(data: AddItemToBookingInput!): Booking
  """
  Change booking status of table
  """
  changeBookingStatus(data: ChangeBookingStatusInput!): Booking
  """
  Pay item on booking
  """
  payItems(bookingItemId: [ID!]!): [BookingItem]!
  """
  Edit restaurant information
  """
  editRestaurantInfo(data: EditRestaurantInfoInput!): Restaurant!
}

type Subscription {
  validationPrompted(tableId: String!): ValidationEvent
}
